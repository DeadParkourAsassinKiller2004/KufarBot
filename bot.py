# pip install "python-telegram-bot[job-queue]
# pip install python-telegram-bot
# pip install requests

import logging
import requests
import os
import asyncio
from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from telegram.error import TelegramError

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = '8247116313:AAGVL3d_3SNPPYI7Wroo8nSE4HhAoEQkKlI'

# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat id –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://api.telegram.org/bot<–¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞>/getUpdates –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç
ALLOWED_CHAT_IDS = [575531308, 753075180]

# URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Kufar
API_URL = 'https://api.kufar.by/search-api/v2/search/rendered-paginated?cat=1010&cmp=0&cur=USD&gtsy=country-belarus~province-minsk~locality-minsk&lang=ru&prc=r:0,360&rms=v.or:1&size=30&sort=lst.d&typ=let'

HEADERS = {
    'accept': '*/*',
    'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
}

CHECK_INTERVAL = 60
SENT_ADS_FILE = 'sent_ads.txt'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


def load_sent_ads():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SENT_ADS_FILE):
        return set()
    with open(SENT_ADS_FILE, 'r') as f:
        return set(line.strip() for line in f)


def save_sent_ad(ad_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(SENT_ADS_FILE, 'a') as f:
        f.write(str(ad_id) + '\n')


def sync_sent_ads_with_current(ads: list):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç sent_ads.txt —Å —Ç–µ–∫—É—â–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.
    –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ ad_id, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ API.
    """
    current_ad_ids = {str(ad.get('ad_id')) for ad in ads if ad.get('ad_id')}
    
    if not current_ad_ids:
        logger.info("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ API ‚Äî —Ñ–∞–π–ª sent_ads.txt –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω.")
        open(SENT_ADS_FILE, 'w').close()
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ ID
    saved_ads = load_sent_ads()
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ API
    synced_ads = saved_ads.intersection(current_ad_ids)
    
    removed_count = len(saved_ads) - len(synced_ads)
    if removed_count > 0:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö ad_id –∏–∑ {SENT_ADS_FILE}")

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(SENT_ADS_FILE, 'w') as f:
        for ad_id in sorted(synced_ads):
            f.write(ad_id + '\n')


def remove_job_if_exists(name: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


async def fetch_ads():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å API Kufar."""
    try:
        response = requests.get(API_URL, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
        return data.get('ads', [])
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []


async def send_ad_notification(context: ContextTypes.DEFAULT_TYPE, chat_id: int, ad: dict, notification_text: str = ""):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ 5 –ø–µ—Ä–≤—ã—Ö —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ –∞–ª—å–±...
    """
    # === 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å ===
    link = ad.get('ad_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')
    subject = ad.get('subject', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    description = ad.get('body_short', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è').strip()
    address = '–ù–µ —É–∫–∞–∑–∞–Ω'
    size = 'N/A'
    floor = 'N/A'
    
    price_raw = ad.get('price_usd')
    price_usd = f"{int(price_raw) / 100.0:.2f}" if price_raw and price_raw.isdigit() else 'N/A'

    for param in ad.get('account_parameters', []):
        if param.get('p') == 'address':
            address = param.get('v', '–ù–µ —É–∫–∞–∑–∞–Ω')
            break
    for param in ad.get('ad_parameters', []):
        if param.get('p') == 'size':
            size = param.get('v', 'N/A')
        if param.get('p') == 'floor' and param.get('v'):
            floor = param['v'][0] if isinstance(param['v'], list) else 'N/A'

    caption_text = (
        f"{notification_text}"
        f"<b>{subject}</b>\n\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {price_usd}$\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
        f"üìè <b>–ü–ª–æ—â–∞–¥—å:</b> {size} –º¬≤\n"
        f"üè¢ <b>–≠—Ç–∞–∂:</b> {floor}\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        f"<a href='{link}'><b>‚û°Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Kufar</b></a>"
    )

    # === 2. –°–æ–±–∏—Ä–∞–µ–º –¥–æ 5 —Ñ–æ—Ç–æ ===
    images = ad.get('images', [])
    media = []
    for i, img in enumerate(images[:5]):
        path = img.get('path')
        if path:
            url = f"https://rms.kufar.by/v1/gallery/{path}"
            if i == 0:
                # –ü–µ—Ä–≤—ã–π ‚Äî —Å –ø–æ–¥–ø–∏—Å—å—é
                media.append(
                    InputMediaPhoto(
                        media=url,
                        caption=caption_text,
                        parse_mode='HTML'
                    )
                )
            else:
                media.append(InputMediaPhoto(media=url))

    # === 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ===
    try:
        if media:
            await context.bot.send_media_group(chat_id=chat_id, media=media)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=caption_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.")
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )


async def monitoring_callback(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    chat_id = context.job.chat_id
    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    
    ads = await fetch_ads()
    if not ads:
        return

    # === –î–û–ë–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è sent_ads.txt —Å API ===
    sync_sent_ads_with_current(ads)

    # === –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
    sent_ads = load_sent_ads()
    for ad in reversed(ads):
        ad_id = ad.get('ad_id')
        if ad_id and str(ad_id) not in sent_ads:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad_id}")
            await send_ad_notification(
                context, 
                chat_id, 
                ad, 
                notification_text="üîî <b>–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞!</b>\n\n"
            )
            save_sent_ad(ad_id)
            await asyncio.sleep(2)


async def show_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å–ø–∏—Å–æ–∫...")
    
    ads = await fetch_ads()
    if not ads:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        return

    # === –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ===
    sync_sent_ads_with_current(ads)

    all_current_ids = [str(ad.get('ad_id')) for ad in ads if ad.get('ad_id')]
    try:
        with open(SENT_ADS_FILE, 'w') as f:
            for ad_id in all_current_ids:
                f.write(ad_id + '\n')
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω.\n\n–ù–∞–π–¥–µ–Ω–æ –∏ –∑–∞–ø–æ–º–Ω–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads)}. –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –≤–∞–º...")
    except IOError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª {SENT_ADS_FILE}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ ID.")
        return
    
    for ad in reversed(ads):
        await send_ad_notification(context, chat_id, ad)
        await asyncio.sleep(1)

    await update.message.reply_text("–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã.")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    job_name = str(chat_id)
    remove_job_if_exists(job_name, context)
    
    context.job_queue.run_repeating(
        monitoring_callback, 
        interval=CHECK_INTERVAL, 
        first=1,
        chat_id=chat_id, 
        name=job_name
    )
    await update.message.reply_text(f"‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!**\n\n–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop.")


async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
        
    job_removed = remove_job_if_exists(str(chat_id), context)
    if job_removed:
        text = "‚ùå **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.**"
    else:
        text = "‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω."
    await update.message.reply_text(text)


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª —Å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
        
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ 'w' (write), —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –µ–≥–æ.
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.
        with open(SENT_ADS_FILE, 'w') as f:
            pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å
        
        logger.info(f"–§–∞–π–ª {SENT_ADS_FILE} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
        
        await update.message.reply_text(
            "‚úÖ **–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω.**\n\n"
            "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (/start) –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –Ω–æ–≤—ã–µ."
        )
        
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ {SENT_ADS_FILE}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")


async def send_welcome_message(application: Application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Å–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã."""
    welcome_text = (
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìå /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
        "üõë /stop ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "üîç /show ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "üóëÔ∏è /clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
        "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å Kufar!"
    )
    
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
            await application.bot.send_message(
                chat_id=chat_id,
                text=welcome_text,
                parse_mode='HTML'
            )
            await asyncio.sleep(1)
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")


def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("show", show_command))
    application.add_handler(CommandHandler("clear", clear_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ job_queue (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    application.job_queue.run_once(
        callback=lambda context: send_welcome_message(application),
        when=2,  # —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        name="welcome_message"
    )

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()