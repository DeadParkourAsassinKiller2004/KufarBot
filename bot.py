# pip install "python-telegram-bot[job-queue]" requests

import logging
import requests
import os
import asyncio
from datetime import datetime, time, timezone, timedelta
from typing import Dict
from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = '8247116313:AAGVL3d_3SNPPYI7Wroo8nSE4HhAoEQkKlI'
ALLOWED_CHAT_IDS = [575531308, 753075180]

API_URL = 'https://api.kufar.by/search-api/v2/search/rendered-paginated?cat=1010&cmp=0&cur=USD&gtsy=country-belarus~province-minsk~locality-minsk&lang=ru&prc=r:0,360&rms=v.or:1&size=30&sort=lst.d&typ=let'
HEADERS = {
    'accept': '*/*',
    'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
}

CHECK_INTERVAL = 60
SENT_ADS_FILE = 'sent_ads.txt'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


# === –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–û–ú sent_ads.txt ===
def load_sent_ads() -> Dict[str, datetime]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç {ad_id: datetime} –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(SENT_ADS_FILE):
        return {}
    result = {}
    with open(SENT_ADS_FILE, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            try:
                ad_id, date_str = line.split(' ', 1)
                result[ad_id] = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {line} ‚Äî {e}")
    return result


async def clean_old_ads(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç sent_ads.txt, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ."""
    logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ sent_ads.txt...")
    ads = load_sent_ads()
    if len(ads) <= 30:
        logger.info(f"–ó–∞–ø–∏—Å–µ–π {len(ads)} <= 30, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    sorted_ads = sorted(ads.items(), key=lambda x: x[1], reverse=True)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    latest_ads = sorted_ads[:30]

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    with open(SENT_ADS_FILE, 'w', encoding='utf-8') as f:
        for ad_id, dt in latest_ads:
            iso = dt.isoformat().replace('+00:00', 'Z')
            f.write(f"{ad_id} {iso}\n")

    logger.info(f"–û—á–∏—â–µ–Ω–æ {len(ads) - 30} –∑–∞–ø–∏—Å–µ–π, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ 30")


def save_sent_ad(ad_id: str, pub_date: datetime):
    """–î–æ–±–∞–≤–ª—è–µ—Ç ad_id –∏ –¥–∞—Ç—É –≤ —Ñ–∞–π–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ad_id –µ—â—ë –Ω–µ—Ç."""
    ads = load_sent_ads()
    if ad_id in ads:
        logger.debug(f"ad_id {ad_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        return

    iso_date = pub_date.isoformat().replace('+00:00', 'Z')
    with open(SENT_ADS_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{ad_id} {iso_date}\n")
    logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ: {ad_id} {iso_date}")


def get_latest_pub_date() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–∞—Ç—É –∏–∑ sent_ads.txt."""
    ads = load_sent_ads()
    if not ads:
        return datetime.now(timezone.utc) - timedelta(hours=3)
    return max(ads.values())


# === –£–¢–ò–õ–ò–¢–´ ===
def remove_job_if_exists(name: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if context.job_queue is None:
        return False
    jobs = context.job_queue.get_jobs_by_name(name)
    if not jobs:
        return False
    for job in jobs:
        job.schedule_removal()
    return True


# === API ===
async def fetch_ads():
    try:
        response = requests.get(API_URL, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
        return data.get('ads', [])
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []


# === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
async def send_ad_notification(context: ContextTypes.DEFAULT_TYPE, chat_id: int, ad: dict, notification_text: str = ""):
    link = ad.get('ad_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')
    subject = ad.get('subject', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    description = ad.get('body_short', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è').strip()
    address = '–ù–µ —É–∫–∞–∑–∞–Ω'
    size = 'N/A'
    floor = 'N/A'
    
    price_raw = ad.get('price_usd')
    price_usd = f"{int(price_raw) / 100.0:.2f}" if price_raw and price_raw.isdigit() else 'N/A'

    for param in ad.get('account_parameters', []):
        if param.get('p') == 'address':
            address = param.get('v', '–ù–µ —É–∫–∞–∑–∞–Ω')
            break
    for param in ad.get('ad_parameters', []):
        if param.get('p') == 'size':
            size = param.get('v', 'N/A')
        if param.get('p') == 'floor' and param.get('v'):
            floor = param['v'][0] if isinstance(param['v'], list) else 'N/A'

    caption_text = (
        f"{notification_text}"
        f"<b>{subject}</b>\n\n"
        f"üíµ <b>–¶–µ–Ω–∞:</b> {price_usd}$\n"
        f"üïì <b>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {datetime.fromisoformat(ad.get('list_time')) + timedelta(hours=3)}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
        f"üìè <b>–ü–ª–æ—â–∞–¥—å:</b> {size} –º¬≤\n"
        f"üè¢ <b>–≠—Ç–∞–∂:</b> {floor}\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        f"<a href='{link}'><b>‚û°Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Kufar</b></a>"
    )

    images = ad.get('images', [])
    media = []
    for i, img in enumerate(images[:5]):
        path = img.get('path')
        if path:
            url = f"https://rms.kufar.by/v1/gallery/{path}"
            if i == 0:
                media.append(InputMediaPhoto(media=url, caption=caption_text, parse_mode='HTML'))
            else:
                media.append(InputMediaPhoto(media=url))

    try:
        if media:
            await context.bot.send_media_group(chat_id=chat_id, media=media)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=caption_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=caption_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )


# === –ö–û–ú–ê–ù–î–´ ===
async def monitoring_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}...")

    ads = await fetch_ads()
    if not ads:
        return

    latest_date = get_latest_pub_date()
    sent_ads = load_sent_ads()
    new_ads = []

    for ad in ads:
        ad_id = str(ad.get('ad_id'))
        list_time_str = ad.get('list_time') or ad.get('list_date')
        if not ad_id or not list_time_str:
            continue
        try:
            pub_date = datetime.fromisoformat(list_time_str.replace('Z', '+00:00'))
        except:
            continue

        if ad_id not in sent_ads and pub_date > latest_date:
            new_ads.append((pub_date, ad))

    if not new_ads:
        logger.info("–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    new_ads.sort(reverse=True, key=lambda x: x[0])

    for pub_date, ad in new_ads:
        ad_id = str(ad['ad_id'])
        logger.info(f"–ù–æ–≤–æ–µ: {ad_id} ({pub_date})")
        await send_ad_notification(
            context, chat_id, ad,
            "üîî <b>–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞!</b>\n\n"
        )
        save_sent_ad(ad_id, pub_date)
        await asyncio.sleep(2)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    job_name = str(chat_id)
    remove_job_if_exists(job_name, context)
    context.job_queue.run_repeating(
        monitoring_callback,
        interval=CHECK_INTERVAL,
        first=1,
        chat_id=chat_id,
        name=job_name
    )
    await update.message.reply_text(f"‚úÖ–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫.")


async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if remove_job_if_exists(str(chat_id), context):
        await update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_CHAT_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    open(SENT_ADS_FILE, 'w').close()
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω. –ü—Ä–∏ /start ‚Äî –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–æ–≤—ã–º–∏.")


async def send_welcome_message(application: Application):
    text = (
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–æ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç ‚òπÔ∏è\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìå /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
        "üõë /stop ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "üóëÔ∏è /clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
        "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å Kufar!"
    )
    for chat_id in ALLOWED_CHAT_IDS:
        try:
            await application.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
            await asyncio.sleep(1)
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")


# === –ó–ê–ü–£–°–ö ===
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("clear", clear_command))

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    app.job_queue.run_once(
        lambda ctx: send_welcome_message(app),
        when=2,
        name="welcome"
    )

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ 00:00
    app.job_queue.run_daily(
        callback=clean_old_ads,
        time=time(hour=21, minute=0),
        days=(0, 1, 2, 3, 4, 5, 6)
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    async def debug_sent_ads():
        await asyncio.sleep(5)
        if os.path.exists(SENT_ADS_FILE):
            with open(SENT_ADS_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ sent_ads.txt:\n{content}")
        else:
            logger.warning("sent_ads.txt –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    app.job_queue.run_once(lambda ctx: asyncio.create_task(debug_sent_ads()), when=6)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
    main()